"""initial migration

Revision ID: 062fcc87b222
Revises: 
Create Date: 2017-03-28 12:18:25.633986

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '062fcc87b222'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bmi_goal',
    sa.Column('bmi_goal_id', sa.Integer(), nullable=False),
    sa.Column('age_min', sa.SmallInteger(), nullable=True),
    sa.Column('age_max', sa.SmallInteger(), nullable=True),
    sa.Column('gender', app.models.Gender(), nullable=True),
    sa.Column('race', app.models.Race(), nullable=True),
    sa.Column('min_healthy_bmi', sa.Float(), nullable=True),
    sa.Column('max_healthy_bmi', sa.Float(), nullable=True),
    sa.Column('obesity_bmi', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('bmi_goal_id')
    )
    op.drop_table('auth_user_user_permissions')
    op.drop_table('auth_group')
    op.drop_table('django_content_type')
    op.drop_table('django_session')
    op.drop_table('auth_user_groups')
    op.drop_table('django_migrations')
    op.drop_table('auth_group_permissions')
    op.drop_table('auth_user')
    op.drop_table('TasteHealthy_test')
    op.drop_table('django_admin_log')
    op.drop_table('auth_permission')
    op.alter_column('food', 'energy',
               existing_type=sa.REAL(),
               nullable=False)
    op.drop_column('food', 'sugar')
    op.alter_column('hpb_focos_food', 'energy',
               existing_type=sa.REAL(),
               nullable=False)
    op.alter_column('hpb_focos_food', 'restaurant_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_user_profile_user_id'), 'user_profile', ['user_id'], unique=False)
    op.drop_index('user_id', table_name='user_profile')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('user_id', 'user_profile', ['user_id'], unique=True)
    op.drop_index(op.f('ix_user_profile_user_id'), table_name='user_profile')
    op.alter_column('hpb_focos_food', 'restaurant_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('hpb_focos_food', 'energy',
               existing_type=sa.REAL(),
               nullable=True)
    op.add_column('food', sa.Column('sugar', sa.REAL(), autoincrement=False, nullable=True))
    op.alter_column('food', 'energy',
               existing_type=sa.REAL(),
               nullable=True)
    op.create_table('auth_permission',
    sa.Column('id', sa.INTEGER(), server_default=sa.text(u"nextval('auth_permission_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('codename', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['content_type_id'], [u'django_content_type.id'], name=u'auth_permiss_content_type_id_2f476e4b_fk_django_content_type_id', initially=u'DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=u'auth_permission_pkey'),
    sa.UniqueConstraint('content_type_id', 'codename', name=u'auth_permission_content_type_id_01ab375a_uniq'),
    postgresql_ignore_search_path=False
    )
    op.create_table('django_admin_log',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('action_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('object_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('object_repr', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('action_flag', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('change_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.CheckConstraint(u'action_flag >= 0', name=u'django_admin_log_action_flag_check'),
    sa.ForeignKeyConstraint(['content_type_id'], [u'django_content_type.id'], name=u'django_admin_content_type_id_c4bce8eb_fk_django_content_type_id', initially=u'DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], [u'auth_user.id'], name=u'django_admin_log_user_id_c564eba6_fk_auth_user_id', initially=u'DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=u'django_admin_log_pkey')
    )
    op.create_table('TasteHealthy_test',
    sa.Column('id', sa.INTEGER(), server_default=sa.text(u'nextval(\'"TasteHealthy_test_id_seq"\'::regclass)'), nullable=False),
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=u'TasteHealthy_test_pkey')
    )
    op.create_table('auth_user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text(u"nextval('auth_user_id_seq'::regclass)"), nullable=False),
    sa.Column('password', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=254), autoincrement=False, nullable=False),
    sa.Column('is_staff', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('date_joined', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=u'auth_user_pkey'),
    sa.UniqueConstraint('username', name=u'auth_user_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('auth_group_permissions',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], [u'auth_group.id'], name=u'auth_group_permissions_group_id_b120cbf9_fk_auth_group_id', initially=u'DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['permission_id'], [u'auth_permission.id'], name=u'auth_group_permiss_permission_id_84c5c92e_fk_auth_permission_id', initially=u'DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=u'auth_group_permissions_pkey'),
    sa.UniqueConstraint('group_id', 'permission_id', name=u'auth_group_permissions_group_id_0cd325b0_uniq')
    )
    op.create_table('django_migrations',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('app', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('applied', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=u'django_migrations_pkey')
    )
    op.create_table('auth_user_groups',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], [u'auth_group.id'], name=u'auth_user_groups_group_id_97559544_fk_auth_group_id', initially=u'DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], [u'auth_user.id'], name=u'auth_user_groups_user_id_6a12ed8b_fk_auth_user_id', initially=u'DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=u'auth_user_groups_pkey'),
    sa.UniqueConstraint('user_id', 'group_id', name=u'auth_user_groups_user_id_94350c0c_uniq')
    )
    op.create_table('django_session',
    sa.Column('session_key', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('session_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expire_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('session_key', name=u'django_session_pkey')
    )
    op.create_table('django_content_type',
    sa.Column('id', sa.INTEGER(), server_default=sa.text(u"nextval('django_content_type_id_seq'::regclass)"), nullable=False),
    sa.Column('app_label', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=u'django_content_type_pkey'),
    sa.UniqueConstraint('app_label', 'model', name=u'django_content_type_app_label_76bd3d3b_uniq'),
    postgresql_ignore_search_path=False
    )
    op.create_table('auth_group',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=u'auth_group_pkey'),
    sa.UniqueConstraint('name', name=u'auth_group_name_key')
    )
    op.create_table('auth_user_user_permissions',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], [u'auth_permission.id'], name=u'auth_user_user_per_permission_id_1fbb5f2c_fk_auth_permission_id', initially=u'DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], [u'auth_user.id'], name=u'auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id', initially=u'DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=u'auth_user_user_permissions_pkey'),
    sa.UniqueConstraint('user_id', 'permission_id', name=u'auth_user_user_permissions_user_id_14a6b632_uniq')
    )
    op.drop_table('bmi_goal')
    # ### end Alembic commands ###
